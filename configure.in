dnl -*- mode: shell-script -*-
dnl Process this file with autoconf to produce a configure script.

AC_INIT(include/libIDL/IDL.h.in)

LIBIDL_MAJOR_VERSION=0
LIBIDL_MINOR_VERSION=8
LIBIDL_MICRO_VERSION=5
LIBIDL_VERSION=$LIBIDL_MAJOR_VERSION.$LIBIDL_MINOR_VERSION.$LIBIDL_MICRO_VERSION
AC_SUBST(LIBIDL_MAJOR_VERSION)
AC_SUBST(LIBIDL_MINOR_VERSION)
AC_SUBST(LIBIDL_MICRO_VERSION)
AC_SUBST(LIBIDL_VERSION)

# Before making a release, the LT_VERSION string should be modified.
# The string is of the form C:R:A.
# - If interfaces have been changed or added, but binary compatibility
# has
#   been preserved, change to C+1:0:A+1
# - If binary compatibility has been broken (eg removed or changed
# interfaces)
#   change to C+1:0:0
# - If the interface is the same as the previous version, change to
# C:R+1:A

LT_VERSION=0:0:0
AC_SUBST(LT_VERSION)

AM_INIT_AUTOMAKE(libIDL, $LIBIDL_VERSION, no-define)

AC_DEFINE_UNQUOTED(LIBIDL_VERSION, "$LIBIDL_VERSION")

dnl --disable-comile-warnings
AC_ARG_ENABLE(compile-warnings, [  --enable-compile-warnings=[no/yes] Turn on compiler warnings.], [enable_compile_warnings="$enableval"],[enable_compile_warnings="yes"])

dnl Cache $ACLOCAL_FLAGS
AC_CACHE_CHECK([for aclocal flags], ac_cv_linc_aclocal_flags,[
   ac_cv_linc_aclocal_flags="$ACLOCAL_FLAGS"
])
ACLOCAL="$ACLOCAL $ac_cv_linc_aclocal_flags"

AC_ISC_POSIX

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AC_CPP_ACCEPT_IDL
if [[ "$ac_cv_cpp_accept_idl" = "no" ]]; then
	AC_MSG_WARN(CPP does not accept IDL)
fi
AC_CPP_PIPE_STDIN
AC_CPP_NOSTDINC
CPP_PROGRAM="$CPP"
AC_DEFINE_UNQUOTED(CPP_PROGRAM, "$CPP")

AM_PROG_LEX
if [[ "$LEX" != "flex" ]]; then
	AC_MSG_ERROR(flex is required to create the libIDL scanner)
fi
LFLAGS="-8"
AC_SUBST(LFLAGS)

AC_PROG_YACC
dnl determine if a usable yacc is available on this system
AC_CHECK_PROG(HAVE_YACC, $YACC, yes, no)
if [[ "$HAVE_YACC" = "no" ]]; then
	AC_MSG_ERROR($YACC is not usable as yacc - consider using bison)
fi

AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL
AM_MAINTAINER_MODE

dnl Checks for libraries.
PKG_CHECK_MODULES(LIBIDL, glib-2.0 >= 1.3.7)
AC_SUBST(LIBIDL_LIBS)
AC_SUBST(LIBIDL_CFLAGS)

AC_STDC_HEADERS
AC_CHECK_HEADERS(stddef.h)
AC_CHECK_HEADERS(unistd.h)
AC_CHECK_HEADERS(wchar.h, HAVE_WCHAR_H=1)
AC_CHECK_HEADERS(wcstr.h, HAVE_WCSTR_H=1)
if test -z "$HAVE_WCHAR_H"; then 
	HAVE_WCHAR_H=0
fi
if test -z "$HAVE_WCSTR_H"; then
	HAVE_WCSTR_H=0
fi
AC_SUBST(HAVE_WCHAR_H)
AC_SUBST(HAVE_WCSTR_H)
AC_CHECK_FUNCS(popen symlink access)

dnl glib requires a 64-bit type
dnl to support win32 add __int64
AC_CHECK_SIZEOF(long long)

AC_MSG_CHECKING(for format to printf and scanf a guint64)
AC_CACHE_VAL(libIDL_cv_long_long_format,[
    for format in ll q I64; do
	AC_TRY_RUN([#include <stdio.h>  
	    int main()
	    {
		long long b, a = -0x3AFAFAFAFAFAFAFALL;
		char buffer[1000];
		sprintf (buffer, "%${format}u", a);
  		sscanf (buffer, "%${format}u", &b);
		exit (b!=a);
	    }
	    ],
	    libIDL_cv_long_long_format=${format}
	    break)
	done])
if test -n "$libIDL_cv_long_long_format"; then
    AC_MSG_RESULT(%${libIDL_cv_long_long_format}u)
    IDL_LL="\"${libIDL_cv_long_long_format}\""
    AC_SUBST(IDL_LL)
else
    AC_MSG_RESULT(none)
    AC_MSG_ERROR([
*** libIDL requires a 64 bit format type.
])
fi


if test "x$GCC" = "xyes" -a "x$enable_compile_warnings" != "xno"; then
        WARN_CFLAGS="-Wall -Wunused -Wmissing-prototypes -Wmissing-declarations"
else
        WARN_CFLAGS=
fi

AC_MSG_CHECKING(what warning flags to pass to the C compiler)
AC_MSG_RESULT($WARN_CFLAGS)
AC_SUBST(WARN_CFLAGS)

AC_OUTPUT([
Makefile
Makefile.msc
include/Makefile
include/libIDL/Makefile
include/libIDL/IDL.h
libIDL-config-2
libIDL.m4
libIDL.spec
libIDL-2.0.pc
libIDL-2.0-uninstalled.pc
])

echo
echo libIDL $LIBIDL_VERSION configuration complete
echo
echo "  C Preprocessor: \"$CPP_PROGRAM\""
if [[ "$ac_cv_cpp_pipe_stdin" = "yes" ]]; then
	echo "  Standard input supported."
else
	echo "  Using symlink method."
fi
echo
