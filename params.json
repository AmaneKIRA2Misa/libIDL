{"name":"Libidl","tagline":"Mirror of git://git.gnome.org/libIDL","body":"\t\t\tlibIDL README\r\n\t\t\t~~~~~~~~~~~~~\r\n\r\nIntroduction\r\n~~~~~~~~~~~~\r\n\r\nlibIDL is a library licensed under the GNU LGPL for creating trees of\r\nCORBA Interface Definition Language (IDL) files, which is a\r\nspecification for defining portable interfaces.  libIDL was initially\r\nwritten for ORBit (the ORB from the GNOME project, and the primary\r\nmeans of libIDL distribution).  However, the functionality was\r\ndesigned to be as reusable and portable as possible.\r\n\r\nIt is written in C, and the aim is to retain the ability to compile it\r\non a system with a standard C compiler.  Preprocessed parser files are\r\nincluded so you are not forced to rebuild the parser, however an\r\neffort is made to keep the parser and lexer compatible with standard\r\nUnix yacc.  Currently, flex is required to generate the lexical\r\nscanner.\r\n\r\nWith libIDL, you can parse an IDL file which will be automatically run\r\nthrough the C preprocessor (on systems with one available), and have\r\ndetailed error and warning messages displayed.  On a compilation\r\nwithout errors, the tree is returned to the custom application.\r\nlibIDL performs compilation phases from lexical analysis to nearly\r\nfull semantic analysis with some optimizations, and will attempt to\r\ngenerate meaningful errors and warnings for invalid or deprecated IDL.\r\n\r\nlibIDL exports functionality used to generate detailed conforming\r\nerror and warning messages in gcc-like format, and also comes with a\r\ndefault backend to generate IDL into a file or string (useful for\r\ncustomized messages or comments in the output).  The IDL backend is\r\ncomplete enough that most generated IDL can be reparsed by libIDL\r\nwithout errors. libIDL returns separate syntax and namespace trees,\r\nand includes functionality to hide syntactical information from the\r\nprimary tree, while keeping it accessible through the namespace for\r\ntype information and name lookup.\r\n\r\nOptional extensions to standard IDL can be enabled using parse flags.\r\nThese include node properties, embedded code fragments, and XPIDL.\r\nNodes can also have declarations tags which assign particular\r\nattributions to certain IDL constructs to further facilitate custom\r\napplications.\r\n\r\nIf you are upgrading to a new version, please see the NEWS file for\r\nany changes which may affect code.\r\n\r\n\r\nEmacs Syntax Highlighting for IDL Code\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nIf you are using Emacs 20.x and do not have decent syntax highlighting\r\nin your IDL mode, you can use the following Emacs lisp to add\r\nIDL-specific highlighting using font-lock mode:\r\n\r\n(font-lock-add-keywords\r\n 'idl-mode\r\n `((\"^#[ \t]*error[ \t]+\\\\(.+\\\\)\" 1 'font-lock-warning-face prepend)\r\n   (\"^#[ \t]*\\\\(include\\\\)[ \t]+\\\\(<[^>\\\"\\n]*>?\\\\)\" 2 'font-lock-string-face)\r\n   (\"^#[ \t]*define[ \t]+\\\\(\\\\sw+\\\\)(\" 1 'font-lock-function-name-face)\r\n   (\"^#[ \t]*\\\\(elif\\\\|if\\\\)\\\\>\"\r\n    (\"\\\\<\\\\(defined\\\\)\\\\>[ \t]*(?\\\\(\\\\sw+\\\\)?\" nil nil\r\n     (1 'font-lock-reference-face)\r\n     (2 'font-lock-variable-name-face nil t)))\r\n   (\"\\\\(__declspec\\\\)[ \t]*(\\\\([^)]+\\\\))\"\r\n    (1 'font-lock-reference-face)\r\n    (2 'font-lock-variable-name-face))\r\n   (\"^#[ \t]*\\\\(\\\\sw+\\\\)\\\\>[ \t]*\\\\(\\\\sw+\\\\)?\"\r\n    (1 'font-lock-reference-face)\r\n    (2 'font-lock-variable-name-face nil t))\r\n   (\"\\\\<\\\\(raises\\\\)\\\\>\" 1 'font-lock-keyword-face)\r\n   (\"[ \t]*\\\\([A-Za-z][A-Za-z0-9_]*\\\\)[ \t]*(\" 1 'font-lock-function-name-face)\r\n   (\"\\\\<\\\\(any\\\\|boolean\\\\|char\\\\|const\\\\|double\\\\|enum\\\\|fixed\\\\|float\\\\|interface\\\\|long\\\\|module\\\\|native\\\\|octet\\\\|Object\\\\|sequence\\\\|short\\\\|string\\\\|struct\\\\|unsigned\\\\|union\\\\|void\\\\|wchar\\\\|wstring\\\\)\\\\>\" 1 'font-lock-type-face)\r\n   (\"\\\\<\\\\(attribute\\\\|case\\\\|context\\\\|default\\\\|exception\\\\|FALSE\\\\|in\\\\|inout\\\\|oneway\\\\|out\\\\|readonly\\\\|switch\\\\|TRUE\\\\|typedef\\\\)\\\\>\" 1 'font-lock-keyword-face)) 'set)\r\n(add-hook 'idl-mode-hook '(lambda () (font-lock-mode 1)))\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}